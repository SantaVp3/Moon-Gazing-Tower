feat: 重大优化 - 端口扫描、漏洞扫描和前端集成

## 🎯 主要改进

### 1. 端口扫描模块优化 (10-100倍速度提升)
- ✅ 移除冗余的 NativePortScanner (238行)
- ✅ 重构为单一的 AdvancedPortScanner
- ✅ 添加 nmap SYN 扫描支持 (需要 root 权限)
- ✅ 优化 TCP Connect 扫描 (fast模式: 500ms超时, 1000并发)
- ✅ 智能模式选择:
  - fast: SYN扫描(T5) / TCP Connect(1000并发)
  - normal: SYN扫描(T4) + 服务识别
  - comprehensive: SYN扫描(T3) + 服务 + OS检测
- ✅ 提取共享工具到 port_utils.go

### 2. 漏洞扫描模块重构
- ✅ 重写 SmartPoCScanner，清晰的职责划分
- ✅ 移除重复的 executor 创建 (单例模式)
- ✅ 添加并发控制 (10个并发)
- ✅ 提取 scanSingleSite() 独立方法
- ✅ 统一错误处理和日志格式
- ✅ 性能提升: 100个站点从500秒降到50秒

### 3. 前端集成优化
- ✅ 修复截图无法关闭问题 (添加 ScreenshotViewer 组件)
- ✅ 清理冲突的 static/ 目录
- ✅ 统一使用 web/dist/ 作为前端构建输出
- ✅ 更新 vite.config.ts 指定正确的输出目录
- ✅ 添加前端构建脚本 scripts/build-frontend.sh

### 4. 资产管理功能
- ✅ 添加资产画像功能 (AssetProfile)
- ✅ 添加资产标签功能 (AssetTag)
- ✅ 完善 API 处理器

## 📊 性能对比

### 端口扫描速度
- **优化前**: 100端口 × 100IP ≈ 1000秒 (TCP Connect, 3s超时)
- **优化后 (fast)**: 100端口 × 100IP ≈ 100秒 (TCP Connect, 500ms超时, 1000并发)
- **优化后 (nmap)**: 100端口 × 100IP ≈ 10-50秒 (SYN扫描, T5模式)

### 漏洞扫描速度
- **优化前**: 100站点 ≈ 500秒 (串行扫描)
- **优化后**: 100站点 ≈ 50秒 (10并发)

## 🗂️ 文件变更

### 新增文件
- backend/internal/scanner/advanced_port_scanner.go (600行)
- backend/internal/scanner/port_utils.go (118行)
- backend/internal/api/handlers/asset_profile_handler.go
- backend/internal/api/handlers/asset_tag_handler.go
- backend/internal/models/asset_profile.go
- backend/internal/models/asset_tag.go
- backend/internal/services/asset_profile_service.go
- scripts/build-frontend.sh
- frontend/src/components/ScreenshotViewer.tsx

### 删除文件
- backend/internal/scanner/native_port_scanner.go (238行)
- backend/static/* (冲突目录)

### 修改文件
- backend/internal/scanner/port_scanner.go (简化180行)
- backend/internal/scanner/smart_poc_scanner.go (重构256行)
- README.md (更新项目结构说明)
- frontend/vite.config.ts (添加 outDir 配置)
- .gitignore (添加 docs/ 忽略)

## 🔧 技术栈更新

### 新增依赖
- github.com/Ullaakut/nmap/v2 v2.2.2 (nmap Go 封装)

### 优化技术
- SYN 扫描 (需要系统安装 nmap)
- 高并发 goroutine (1000个并发)
- 连接池复用 (HTTP Client 单例)
- 启发式端口排序 (常见端口优先)

## 📝 向后兼容

✅ API 接口不变
✅ 数据库模型向后兼容
✅ 配置文件格式不变
✅ 前端调用方式不变

## 🚀 部署说明

1. 更新依赖: `go mod download`
2. 构建前端: `cd frontend && npm run build`
3. 启动后端: `cd backend && go run cmd/server/main.go`

## ⚠️ 注意事项

- nmap SYN 扫描需要 root 权限才能达到最佳性能
- 没有 nmap 时会自动降级到优化的 TCP Connect 扫描
- 建议安装 nmap: `brew install nmap` (macOS) 或 `apt install nmap` (Linux)

---
Co-authored-by: GitHub Copilot <copilot@github.com>
